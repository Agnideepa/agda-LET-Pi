\begin{code}
module Languages.PiTyped where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; trans; sym; cong; cong-app; subst)
open Eq.‚â°-Reasoning using (begin_; step-‚â°; _‚àé)

-- Type universe -- should combinator types be separate from value types?

data ùïì : Set where
  ùüô : ùïì
  _√ó_ _+_ : ùïì ‚Üí ùïì ‚Üí ùïì

data ùïî : Set where
  _‚Üî_ : ùïì ‚Üí ùïì ‚Üí ùïî

-- Defining values and their types together

data val : ùïì ‚Üí Set where
  [] : val ùüô
  [_,_] : ‚àÄ{b‚ÇÅ b‚ÇÇ}
        ‚Üí val b‚ÇÅ
        ‚Üí val b‚ÇÇ
       -----------
        ‚Üí val (b‚ÇÅ √ó b‚ÇÇ)
  left : ‚àÄ{b‚ÇÅ b‚ÇÇ}
        ‚Üí val b‚ÇÅ
       -----------
        ‚Üí val (b‚ÇÅ + b‚ÇÇ)
  right : ‚àÄ{b‚ÇÅ b‚ÇÇ}
        ‚Üí val b‚ÇÇ
       -----------
        ‚Üí val (b‚ÇÅ + b‚ÇÇ)

-- Defining combinators along with types
data comb‚ÇÄ : ùïî ‚Üí Set where
  swap‚Å∫ : ‚àÄ{b‚ÇÅ b‚ÇÇ : ùïì} ‚Üí comb‚ÇÄ ((b‚ÇÅ + b‚ÇÇ) ‚Üî (b‚ÇÇ + b‚ÇÅ))
  swapÀ£ : ‚àÄ{b‚ÇÅ b‚ÇÇ} ‚Üí comb‚ÇÄ ((b‚ÇÅ √ó b‚ÇÇ) ‚Üî (b‚ÇÇ √ó b‚ÇÅ))
  assocl‚Å∫ : ‚àÄ{b‚ÇÅ b‚ÇÇ b‚ÇÉ} ‚Üí comb‚ÇÄ ((b‚ÇÅ + (b‚ÇÇ + b‚ÇÉ)) ‚Üî ((b‚ÇÅ + b‚ÇÇ) + b‚ÇÉ))
  assocr‚Å∫ : ‚àÄ{b‚ÇÅ b‚ÇÇ b‚ÇÉ} ‚Üí comb‚ÇÄ (((b‚ÇÅ + b‚ÇÇ) + b‚ÇÉ) ‚Üî (b‚ÇÅ + (b‚ÇÇ + b‚ÇÉ)))
  assoclÀ£ : ‚àÄ{b‚ÇÅ b‚ÇÇ b‚ÇÉ} ‚Üí comb‚ÇÄ ((b‚ÇÅ √ó (b‚ÇÇ √ó b‚ÇÉ)) ‚Üî ((b‚ÇÅ √ó b‚ÇÇ) √ó b‚ÇÉ))
  assocrÀ£ : ‚àÄ{b‚ÇÅ b‚ÇÇ b‚ÇÉ} ‚Üí comb‚ÇÄ (((b‚ÇÅ √ó b‚ÇÇ) √ó b‚ÇÉ) ‚Üî (b‚ÇÅ √ó (b‚ÇÇ √ó b‚ÇÉ)))
  unite : ‚àÄ{b} ‚Üí comb‚ÇÄ ((ùüô √ó b) ‚Üî b)
  uniti : ‚àÄ{b} ‚Üí comb‚ÇÄ (b ‚Üî (ùüô √ó b))
  distrib : ‚àÄ{b‚ÇÅ b‚ÇÇ b‚ÇÉ} ‚Üí comb‚ÇÄ (((b‚ÇÅ + b‚ÇÇ) √ó b‚ÇÉ) ‚Üî ((b‚ÇÅ √ó b‚ÇÉ) + (b‚ÇÇ √ó b‚ÇÉ)))
  factor : ‚àÄ{b‚ÇÅ b‚ÇÇ b‚ÇÉ} ‚Üí comb‚ÇÄ (((b‚ÇÅ √ó b‚ÇÉ) + (b‚ÇÇ √ó b‚ÇÉ)) ‚Üî ((b‚ÇÅ + b‚ÇÇ) √ó b‚ÇÉ))
  id : ‚àÄ{b} ‚Üí comb‚ÇÄ (b ‚Üî b)
  _+_ : ‚àÄ{b‚ÇÅ b‚ÇÇ b‚ÇÉ b‚ÇÑ}
        ‚Üí comb‚ÇÄ (b‚ÇÅ ‚Üî b‚ÇÇ)
        ‚Üí comb‚ÇÄ (b‚ÇÉ ‚Üî b‚ÇÑ)
        ----------------
        ‚Üí comb‚ÇÄ ((b‚ÇÅ + b‚ÇÉ) ‚Üî (b‚ÇÇ + b‚ÇÑ))
  _√ó_ : ‚àÄ{b‚ÇÅ b‚ÇÇ b‚ÇÉ b‚ÇÑ}
        ‚Üí comb‚ÇÄ (b‚ÇÅ ‚Üî b‚ÇÇ)
        ‚Üí comb‚ÇÄ (b‚ÇÉ ‚Üî b‚ÇÑ)
        ----------------
        ‚Üí comb‚ÇÄ ((b‚ÇÅ √ó b‚ÇÉ) ‚Üî (b‚ÇÇ √ó b‚ÇÑ))
  _!_ : ‚àÄ{b‚ÇÅ b‚ÇÇ b‚ÇÉ}
        ‚Üí comb‚ÇÄ (b‚ÇÅ ‚Üî b‚ÇÇ)
        ‚Üí comb‚ÇÄ (b‚ÇÇ ‚Üî b‚ÇÉ)
        ----------------
        ‚Üí comb‚ÇÄ (b‚ÇÅ ‚Üî b‚ÇÉ)
  symm : ‚àÄ{b‚ÇÅ b‚ÇÇ}
        ‚Üí comb‚ÇÄ (b‚ÇÅ ‚Üî b‚ÇÇ)
        ----------------
        ‚Üí comb‚ÇÄ (b‚ÇÇ ‚Üî b‚ÇÅ)
  
  
_‚Ä† : ‚àÄ{b b' : ùïì} ‚Üí comb‚ÇÄ (b ‚Üî b') ‚Üí comb‚ÇÄ (b' ‚Üî b)
swap‚Å∫ ‚Ä† = swap‚Å∫
assoclÀ£ ‚Ä† = assocrÀ£
assocrÀ£ ‚Ä† = assoclÀ£
assocl‚Å∫ ‚Ä† = assocr‚Å∫
assocr‚Å∫ ‚Ä† = assocl‚Å∫
distrib ‚Ä† = factor
factor ‚Ä† = distrib
unite ‚Ä† = uniti
uniti ‚Ä† = unite
id ‚Ä† = id
swapÀ£ ‚Ä† = swapÀ£
(c‚ÇÅ + c‚ÇÇ)‚Ä† = (c‚ÇÅ ‚Ä†) + (c‚ÇÇ ‚Ä†)
(c‚ÇÅ √ó c‚ÇÇ)‚Ä† = (c‚ÇÅ ‚Ä†) √ó (c‚ÇÇ ‚Ä†)
(c‚ÇÅ ! c‚ÇÇ)‚Ä† = (c‚ÇÇ ‚Ä†) ! (c‚ÇÅ ‚Ä†)
(symm c)‚Ä† = c
  

-- OPERATIONAL SEMANTICS - BOTH BACKWARD AND FORWARD DIRECTIONS --
\end{code}

%<*pi-eval>
\begin{code}
_[_]·∂† : ‚àÄ {b b'} ‚Üí comb‚ÇÄ (b ‚Üî b') ‚Üí val b ‚Üí val b'
_[_]·µá : ‚àÄ {b b'} ‚Üí comb‚ÇÄ (b ‚Üî b') ‚Üí val b' ‚Üí val b

\end{code}
%</pi-eval>

\begin{code}
swap‚Å∫ [ left v ]·∂† = right v
swap‚Å∫ [ right v ]·∂† = left v
swapÀ£ [ ([ v‚ÇÅ , v‚ÇÇ ]) ]·∂† = [ v‚ÇÇ , v‚ÇÅ ]
assocl‚Å∫ [ left v‚ÇÅ ]·∂† = left (left v‚ÇÅ)
assocl‚Å∫ [ right (left v‚ÇÇ) ]·∂† = left (right v‚ÇÇ)
assocl‚Å∫ [ right (right v‚ÇÉ) ]·∂† = right v‚ÇÉ
assocr‚Å∫ [ left (left v‚ÇÅ) ]·∂† = left v‚ÇÅ
assocr‚Å∫ [ left (right v‚ÇÇ) ]·∂† = right (left v‚ÇÇ)
assocr‚Å∫ [ right v‚ÇÉ ]·∂† = right (right v‚ÇÉ)
unite [ ([ unit , v ]) ]·∂† = v
uniti [ v ]·∂† = [ [] , v ]
assoclÀ£ [ ([ v‚ÇÅ , [ v‚ÇÇ , v‚ÇÉ ] ]) ]·∂† = [ [ v‚ÇÅ , v‚ÇÇ ] , v‚ÇÉ ]
assocrÀ£ [ ([ [ v‚ÇÅ , v‚ÇÇ ] , v‚ÇÉ ]) ]·∂† = [ v‚ÇÅ , [ v‚ÇÇ , v‚ÇÉ ] ]
distrib [ ([ left v‚ÇÅ , v‚ÇÉ ]) ]·∂† = left ([ v‚ÇÅ , v‚ÇÉ ])
distrib [ ([ right v‚ÇÇ , v‚ÇÉ ]) ]·∂† = right ([ v‚ÇÇ , v‚ÇÉ ])
factor [ left ([ v‚ÇÅ , v‚ÇÉ ]) ]·∂† = [ left v‚ÇÅ , v‚ÇÉ ]
factor [ right ([ v‚ÇÇ , v‚ÇÉ ]) ]·∂† = [ right v‚ÇÇ , v‚ÇÉ ]
id [ v ]·∂† = v
(c‚ÇÅ + c‚ÇÇ) [ left v‚ÇÅ ]·∂† = left (c‚ÇÅ [ v‚ÇÅ ]·∂†)
(c‚ÇÅ + c‚ÇÇ) [ right v‚ÇÇ ]·∂† = right (c‚ÇÇ [ v‚ÇÇ ]·∂†)
(c‚ÇÅ √ó c‚ÇÇ) [ ([ v‚ÇÅ , v‚ÇÇ ]) ]·∂† = [ (c‚ÇÅ [ v‚ÇÅ ]·∂†) , (c‚ÇÇ [ v‚ÇÇ ]·∂†) ]
(c‚ÇÅ ! c‚ÇÇ) [ v ]·∂† = c‚ÇÇ [ (c‚ÇÅ [ v ]·∂†) ]·∂†
(symm c) [ v ]·∂† = c [ v ]·µá

swap‚Å∫ [ left v ]·µá = right v
swap‚Å∫ [ right v ]·µá = left v
swapÀ£ [ ([ v‚ÇÅ , v‚ÇÇ ]) ]·µá = [ v‚ÇÇ , v‚ÇÅ ]
assocr‚Å∫ [ left v‚ÇÅ ]·µá = left (left v‚ÇÅ)
assocr‚Å∫ [ right (left v‚ÇÇ) ]·µá = left (right v‚ÇÇ)
assocr‚Å∫ [ right (right v‚ÇÉ) ]·µá = right v‚ÇÉ
assocl‚Å∫ [ left (left v‚ÇÅ) ]·µá = left v‚ÇÅ
assocl‚Å∫ [ left (right v‚ÇÇ) ]·µá = right (left v‚ÇÇ)
assocl‚Å∫ [ right v‚ÇÉ ]·µá = right (right v‚ÇÉ)
uniti [ ([ unit , v ]) ]·µá = v
unite [ v ]·µá = [ [] , v ]
assocrÀ£ [ ([ v‚ÇÅ , [ v‚ÇÇ , v‚ÇÉ ] ]) ]·µá = [ [ v‚ÇÅ , v‚ÇÇ ] , v‚ÇÉ ]
assoclÀ£ [ ([ [ v‚ÇÅ , v‚ÇÇ ] , v‚ÇÉ ]) ]·µá = [ v‚ÇÅ , [ v‚ÇÇ , v‚ÇÉ ] ]
factor [ ([ left v‚ÇÅ , v‚ÇÉ ]) ]·µá = left ([ v‚ÇÅ , v‚ÇÉ ])
factor [ ([ right v‚ÇÇ , v‚ÇÉ ]) ]·µá = right ([ v‚ÇÇ , v‚ÇÉ ])
distrib [ left ([ v‚ÇÅ , v‚ÇÉ ]) ]·µá = [ left v‚ÇÅ , v‚ÇÉ ]
distrib [ right ([ v‚ÇÇ , v‚ÇÉ ]) ]·µá = [ right v‚ÇÇ , v‚ÇÉ ]
id [ v ]·µá = v
(c‚ÇÅ + c‚ÇÇ) [ left v‚ÇÅ ]·µá = left (c‚ÇÅ [ v‚ÇÅ ]·µá)
(c‚ÇÅ + c‚ÇÇ) [ right v‚ÇÇ ]·µá = right (c‚ÇÇ [ v‚ÇÇ ]·µá)
(c‚ÇÅ √ó c‚ÇÇ) [ ([ v‚ÇÅ , v‚ÇÇ ]) ]·µá = [ (c‚ÇÅ [ v‚ÇÅ ]·µá) , (c‚ÇÇ [ v‚ÇÇ ]·µá) ]
(c‚ÇÅ ! c‚ÇÇ) [ v ]·µá = c‚ÇÅ [ (c‚ÇÇ [ v ]·µá) ]·µá
(symm c) [ v ]·µá = c [ v ]·∂†


-- Proof of reversibility

-- x‚ÇÅ = x‚ÇÇ ^ y‚ÇÅ = y‚ÇÇ ‚Üí [ x‚ÇÅ , y‚ÇÅ ] = [ x‚ÇÇ , y‚ÇÇ ] - for equality of pairs - not sure if this is necessary
[]-cong : ‚àÄ {b‚ÇÅ b‚ÇÇ} ‚Üí ‚àÄ {x‚ÇÅ x‚ÇÇ : val b‚ÇÅ} ‚Üí ‚àÄ {y‚ÇÅ y‚ÇÇ : val b‚ÇÇ} ‚Üí  x‚ÇÅ ‚â° x‚ÇÇ ‚Üí y‚ÇÅ ‚â° y‚ÇÇ ‚Üí [ x‚ÇÅ , y‚ÇÅ ] ‚â° [ x‚ÇÇ , y‚ÇÇ ]
[]-cong refl refl = refl

--IDEAS THAT DID NOT WORK

{-data _on_‚Ü¶_ : ‚àÄ {b b'} ‚Üí comb‚ÇÄ (b ‚Üî b') ‚Üí val b ‚Üí val b' ‚Üí Set where
  swap‚Å∫left : ‚àÄ{b‚ÇÅ} ‚Üí ‚àÄ {v : val b‚ÇÅ} ‚Üí swap‚Å∫ on (left v) ‚Ü¶ (right v)
  swap‚Å∫right : ‚àÄ{b‚ÇÇ} ‚Üí ‚àÄ {v : val b‚ÇÇ} ‚Üí swap‚Å∫ on (right v) ‚Ü¶ (left v)
  _√ó_ : ‚àÄ {b‚ÇÅ b‚ÇÇ b‚ÇÉ b‚ÇÑ}{v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ} ‚Üí ‚àÄ {c‚ÇÅ : comb‚ÇÄ (b‚ÇÅ ‚Üî b‚ÇÉ)} ‚Üí ‚àÄ {c‚ÇÇ : comb‚ÇÄ (b‚ÇÇ ‚Üî b‚ÇÑ)}  
       ‚Üí c‚ÇÅ on v‚ÇÅ ‚Ü¶ v‚ÇÉ
       ‚Üí c‚ÇÇ on v‚ÇÇ ‚Ü¶ v‚ÇÑ
       --------------
       ‚Üí (c‚ÇÅ √ó c‚ÇÇ) on [ v‚ÇÅ , v‚ÇÇ ] ‚Ü¶ [ v‚ÇÉ , v‚ÇÑ ]
-}

-- TO PROVE OTHER SIDE OF THE PROPOSITION

{- First we postulate a form of extensionality for combinators. If they
   lead to the same forward evaluation, then they are equal.
-}

{- postulate
  comb-extensionality : ‚àÄ {b b'} (c‚ÇÅ c‚ÇÇ : comb‚ÇÄ (b ‚Üî b'))
    ‚Üí ((v : val b) ‚Üí (v' : val b') ‚Üí c‚ÇÅ [ v ]·∂† ‚â° v' ‚Üí c‚ÇÇ [ v ]·∂† ‚â° v' )
    --‚Üí (‚àÄ(v v') ‚Üí c‚ÇÇ [ v ]·∂† ‚â° v' ‚Üí c‚ÇÅ [ v ]·∂† ‚â° v' )
      -----------------------
    ‚Üí c‚ÇÅ ‚â° c‚ÇÇ
symm=c‚Ä† : ‚àÄ {b b'} (c : comb‚ÇÄ (b ‚Üî b')) ‚Üí (symm c) ‚â° (c ‚Ä†)
symm=c‚Ä† c = comb-extensionality (symm c) (c ‚Ä†) (Œª{v v' pr ‚Üí lemma-3 c v' (lemma-2 c v pr)})
adj-of-adj-is-id : ‚àÄ {b b'} ‚Üí ‚àÄ (c : comb‚ÇÄ (b ‚Üî b')) ‚Üí ((c ‚Ä†) ‚Ä†) ‚â° c
adj-of-adj-is-id swap‚Å∫ = refl
adj-of-adj-is-id assoclÀ£ = refl
adj-of-adj-is-id assocrÀ£ = refl
adj-of-adj-is-id assocl‚Å∫ = refl
adj-of-adj-is-id assocr‚Å∫ = refl
adj-of-adj-is-id distrib = refl
adj-of-adj-is-id factor = refl
adj-of-adj-is-id unite = refl
adj-of-adj-is-id uniti = refl
adj-of-adj-is-id id = refl
adj-of-adj-is-id swapÀ£ = refl
adj-of-adj-is-id (c‚ÇÅ + c‚ÇÇ) rewrite adj-of-adj-is-id c‚ÇÅ | adj-of-adj-is-id c‚ÇÇ = refl
adj-of-adj-is-id (c‚ÇÅ √ó c‚ÇÇ) rewrite adj-of-adj-is-id c‚ÇÅ | adj-of-adj-is-id c‚ÇÇ = refl
adj-of-adj-is-id (c‚ÇÅ ! c‚ÇÇ) rewrite adj-of-adj-is-id c‚ÇÅ | adj-of-adj-is-id c‚ÇÇ = refl
adj-of-adj-is-id (symm c) = sym (symm=c‚Ä† c)
-}

-- FIRST WE PROVE THAT FORWARD AND BACKWARD EVALUATION ARE INVERSES OF EACH OTHER

lemma-1 : ‚àÄ {b b'} ‚Üí ‚àÄ(c : comb‚ÇÄ (b ‚Üî b')) ‚Üí ‚àÄ (v : val b) ‚Üí c [ c [ v ]·∂† ]·µá ‚â° v
lemma-2 : ‚àÄ {b b'} ‚Üí ‚àÄ(c : comb‚ÇÄ (b ‚Üî b')) ‚Üí ‚àÄ (v : val b') ‚Üí c [ c [ v ]·µá ]·∂† ‚â° v

lemma-1 swap‚Å∫ (left v) = refl
lemma-1 swap‚Å∫ (right v) = refl
lemma-1 swapÀ£ ([ v‚ÇÅ , v‚ÇÇ ]) = refl
lemma-1 assocl‚Å∫ (left v‚ÇÅ) = refl
lemma-1 assocl‚Å∫ (right (left v‚ÇÇ)) = refl
lemma-1 assocl‚Å∫ (right (right v‚ÇÉ)) = refl
lemma-1 assocr‚Å∫ (left (left v‚ÇÅ)) = refl
lemma-1 assocr‚Å∫ (left (right v‚ÇÇ)) = refl
lemma-1 assocr‚Å∫ (right v‚ÇÉ) = refl
lemma-1 unite ([ [] , v ]) = refl
lemma-1 uniti v = refl
lemma-1 assoclÀ£ ([ v‚ÇÅ , [ v‚ÇÇ , v‚ÇÉ ] ]) = refl
lemma-1 assocrÀ£ ([ [ v‚ÇÅ , v‚ÇÇ ] , v‚ÇÉ ]) = refl
lemma-1 distrib ([ left v‚ÇÅ , v‚ÇÉ ]) = refl
lemma-1 distrib ([ right v‚ÇÇ , v‚ÇÉ ]) = refl
lemma-1 factor (left ([ v‚ÇÅ , v‚ÇÉ ])) = refl
lemma-1 factor (right ([ v‚ÇÇ , v‚ÇÉ ])) = refl
lemma-1 id v = refl
lemma-1 (c‚ÇÅ + c‚ÇÇ) (left v‚ÇÅ) = cong left (lemma-1 c‚ÇÅ v‚ÇÅ)
lemma-1 (c‚ÇÅ + c‚ÇÇ) (right v‚ÇÇ) = cong right (lemma-1 c‚ÇÇ v‚ÇÇ)
lemma-1 (c‚ÇÅ √ó c‚ÇÇ) ([ v‚ÇÅ , v‚ÇÇ ]) = []-cong (lemma-1 c‚ÇÅ v‚ÇÅ) (lemma-1 c‚ÇÇ v‚ÇÇ)
-- REWRITE THIS TO MAKE USE OF LESS CONFUSING SYNTAX
lemma-1 (c‚ÇÅ ! c‚ÇÇ) v = trans (cong (c‚ÇÅ [_]·µá) (lemma-1 c‚ÇÇ (c‚ÇÅ [ v ]·∂†))) (lemma-1 c‚ÇÅ v)
lemma-1 (symm c) v = lemma-2 c v

lemma-2 swap‚Å∫ (left v) = refl
lemma-2 swap‚Å∫ (right v) = refl
lemma-2 swapÀ£ ([ v‚ÇÅ , v‚ÇÇ ]) = refl
lemma-2 assocr‚Å∫ (left v‚ÇÅ) = refl
lemma-2 assocr‚Å∫ (right (left v‚ÇÇ)) = refl
lemma-2 assocr‚Å∫ (right (right v‚ÇÉ)) = refl
lemma-2 assocl‚Å∫ (left (left v‚ÇÅ)) = refl
lemma-2 assocl‚Å∫ (left (right v‚ÇÇ)) = refl
lemma-2 assocl‚Å∫ (right v‚ÇÉ) = refl
lemma-2 uniti ([ [] , v ]) = refl
lemma-2 unite v = refl
lemma-2 assocrÀ£ ([ v‚ÇÅ , [ v‚ÇÇ , v‚ÇÉ ] ]) = refl
lemma-2 assoclÀ£ ([ [ v‚ÇÅ , v‚ÇÇ ] , v‚ÇÉ ]) = refl
lemma-2 factor ([ left v‚ÇÅ , v‚ÇÉ ]) = refl
lemma-2 factor ([ right v‚ÇÇ , v‚ÇÉ ]) = refl
lemma-2 distrib (left ([ v‚ÇÅ , v‚ÇÉ ])) = refl
lemma-2 distrib (right ([ v‚ÇÇ , v‚ÇÉ ])) = refl
lemma-2 id v = refl
lemma-2 (c‚ÇÅ + c‚ÇÇ) (left v‚ÇÅ) = cong left (lemma-2 c‚ÇÅ v‚ÇÅ)
lemma-2 (c‚ÇÅ + c‚ÇÇ) (right v‚ÇÇ) = cong right (lemma-2 c‚ÇÇ v‚ÇÇ)
lemma-2 (c‚ÇÅ √ó c‚ÇÇ) ([ v‚ÇÅ , v‚ÇÇ ]) = []-cong (lemma-2 c‚ÇÅ v‚ÇÅ) (lemma-2 c‚ÇÇ v‚ÇÇ)
-- AS IN LEMMA 1, THIS IS UNCLEAR SYNTAX
lemma-2 (c‚ÇÅ ! c‚ÇÇ) v = trans (cong (c‚ÇÇ [_]·∂†) (lemma-2 c‚ÇÅ (c‚ÇÇ [ v ]·µá))) (lemma-2 c‚ÇÇ v)
lemma-2 (symm c) v = lemma-1 c v

-- THIS IS PROPOSITION 3.2
\end{code}

%<*pi-rev>
\begin{code}
lemma-3 : ‚àÄ {b b'}(c : comb‚ÇÄ (b ‚Üî b'))(v : val b)
                                 ‚Üí (c ‚Ä†) [ c [ v ]·∂† ]·∂† ‚â° v

\end{code}
%</pi-rev>

\begin{code}
lemma-3 swap‚Å∫ (left v) = refl
lemma-3 swap‚Å∫ (right v) = refl
lemma-3 swapÀ£ ([ v‚ÇÅ , v‚ÇÇ ]) = refl
lemma-3 assocl‚Å∫ (left v‚ÇÅ) = refl
lemma-3 assocl‚Å∫ (right (left v‚ÇÇ)) = refl
lemma-3 assocl‚Å∫ (right (right v‚ÇÉ)) = refl
lemma-3 assocr‚Å∫ (left (left v‚ÇÅ)) = refl
lemma-3 assocr‚Å∫ (left (right v‚ÇÇ)) = refl
lemma-3 assocr‚Å∫ (right v‚ÇÉ) = refl
lemma-3 unite ([ [] , v ]) = refl
lemma-3 uniti v = refl
lemma-3 assoclÀ£ ([ v‚ÇÅ , [ v‚ÇÇ , v‚ÇÉ ] ]) = refl
lemma-3 assocrÀ£ ([ [ v‚ÇÅ , v‚ÇÇ ] , v‚ÇÉ ]) = refl
lemma-3 distrib ([ left v‚ÇÅ , v‚ÇÉ ]) = refl
lemma-3 distrib ([ right v‚ÇÇ , v‚ÇÉ ]) = refl
lemma-3 factor (left ([ v‚ÇÅ , v‚ÇÉ ])) = refl
lemma-3 factor (right ([ v‚ÇÇ , v‚ÇÉ ])) = refl
lemma-3 id v = refl
lemma-3 (c‚ÇÅ + c‚ÇÇ) (left v‚ÇÅ) = cong left (lemma-3 c‚ÇÅ v‚ÇÅ)
lemma-3 (c‚ÇÅ + c‚ÇÇ) (right v‚ÇÇ) = cong right (lemma-3 c‚ÇÇ v‚ÇÇ)
lemma-3 (c‚ÇÅ √ó c‚ÇÇ) ([ v‚ÇÅ , v‚ÇÇ ]) = []-cong (lemma-3 c‚ÇÅ v‚ÇÅ) (lemma-3 c‚ÇÇ v‚ÇÇ)
lemma-3 (c‚ÇÅ ! c‚ÇÇ) v = trans (cong ((c‚ÇÅ ‚Ä†) [_]·∂†) (lemma-3 c‚ÇÇ (c‚ÇÅ [ v ]·∂†))) (lemma-3 c‚ÇÅ v)
lemma-3 (symm c) v = lemma-2 c v

-- Toffoli gate

-- Boolean type definition
bool : ùïì
bool = ùüô + ùüô

-- Defining the AND function in the meta-language - not meant to be reversible
AND : val bool ‚Üí val bool ‚Üí val bool
AND (right []) (right []) = right []
AND (right []) (left []) = right []
AND (left []) (right []) = right []
AND (left []) (left []) = left []

-- Boolean NOT function
NOT : comb‚ÇÄ (bool ‚Üî bool)
NOT = swap‚Å∫

-- If c function - one-armed if function
if : ‚àÄ{b} ‚Üí comb‚ÇÄ (b ‚Üî b) ‚Üí comb‚ÇÄ ((bool √ó b) ‚Üî (bool √ó b))
if c = distrib ! (((id √ó c) + id) ! factor)

-- Defining cnot
cnot : comb‚ÇÄ ((bool √ó bool) ‚Üî (bool √ó bool))
cnot = if NOT

-- Defining the Toffoli gate
Toffoli-gate : comb‚ÇÄ ((bool √ó (bool √ó bool)) ‚Üî (bool √ó (bool √ó bool)))
Toffoli-gate = if cnot

-- Proof that gate works as expected
Toffoli-proof : ‚àÄ{v‚ÇÅ v‚ÇÇ : val bool} ‚Üí Toffoli-gate [ [ v‚ÇÅ , [ v‚ÇÇ , (right []) ] ] ]·∂† ‚â° [ v‚ÇÅ , [ v‚ÇÇ , (AND v‚ÇÅ v‚ÇÇ) ] ]
Toffoli-proof {v‚ÇÅ = (right [])} {v‚ÇÇ = (right [])} = refl
Toffoli-proof {v‚ÇÅ = (right [])} {v‚ÇÇ = (left [])} = refl
Toffoli-proof {v‚ÇÅ = (left [])} {v‚ÇÇ = (right [])} = refl
Toffoli-proof {v‚ÇÅ = (left [])} {v‚ÇÇ = (left [])} = refl

