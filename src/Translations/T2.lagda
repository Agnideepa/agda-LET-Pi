\begin{code}
module Translations.T2 where

open import Languages.MLPi
open import Languages.PiTyped
open import Relation.Binary.PropositionalEquality using (_‚â°_ ; refl)
open import Data.Product using (Œ£ ; _,_)

\end{code}
%<*heap-decl>
\begin{code}
heap : ‚àÄ{b b'} ‚Üí comb (b ‚Üù b') ‚Üí ùïì
garbage : ‚àÄ{b b'} ‚Üí comb (b ‚Üù b') ‚Üí ùïì
\end{code}
%</heap-decl>
\begin{code}

heap (arr _) = ùüô
heap (a‚ÇÅ ‚ãô a‚ÇÇ) = (heap a‚ÇÇ) √ó (heap a‚ÇÅ)
heap (a‚ÇÅ ‚äó a‚ÇÇ) = (heap a‚ÇÅ) √ó (heap a‚ÇÇ)
heap (first a) = heap a
heap (create b) = b
heap (erase) = ùüô
heap {b' = b‚ÇÇ + b‚ÇÉ} (left a) = (heap a) √ó ((b‚ÇÇ + b‚ÇÉ) √ó (b‚ÇÉ + b‚ÇÇ))

\end{code}
%<*heap-sum>
\begin{code}
heap {b' = b‚ÇÉ + b‚ÇÑ} (a‚ÇÅ ‚äï a‚ÇÇ) = ((heap a‚ÇÅ) √ó (heap a‚ÇÇ)) √ó ((b‚ÇÉ + b‚ÇÑ) √ó (b‚ÇÑ + b‚ÇÉ))
\end{code}
%</heap-sum>
\begin{code}


garbage (arr _) = ùüô
garbage (a‚ÇÅ ‚ãô a‚ÇÇ) = (garbage a‚ÇÅ) √ó (garbage a‚ÇÇ)
garbage (a‚ÇÅ ‚äó a‚ÇÇ) = (garbage a‚ÇÅ) √ó (garbage a‚ÇÇ)
garbage (first a) = garbage a
garbage (create b) = ùüô
garbage (erase {b = b‚ÇÅ}) = b‚ÇÅ
garbage {b' = b‚ÇÇ + b‚ÇÉ} (left a) = ((garbage a) √ó (b‚ÇÇ √ó (b‚ÇÉ + b‚ÇÇ))) + (((heap a) √ó (b‚ÇÇ + b‚ÇÉ)) √ó b‚ÇÉ)
\end{code}
%<*garbage-sum>
\begin{code}
garbage {b' = b‚ÇÉ + b‚ÇÑ} (a‚ÇÅ ‚äï a‚ÇÇ) = (((garbage a‚ÇÅ) √ó (heap a‚ÇÇ)) √ó (b‚ÇÉ √ó (b‚ÇÑ + b‚ÇÉ)))
                                                    +
                                   (((garbage a‚ÇÇ) √ó ((heap a‚ÇÅ) √ó (b‚ÇÉ + b‚ÇÑ))) √ó b‚ÇÑ)
\end{code}
%</garbage-sum>
\begin{code}

\end{code}
%<*T2-decl>
\begin{code}
T‚ÇÇ : ‚àÄ{b‚ÇÅ b‚ÇÇ} ‚Üí (c : comb (b‚ÇÅ ‚Üù b‚ÇÇ)) ‚Üí (heap(c) √ó b‚ÇÅ) ‚Üî (garbage(c) √ó b‚ÇÇ)
\end{code}
%</T2-decl>
\begin{code}
\end{code}
%<*t2-pair>
\begin{code}
T‚ÇÇ (a‚ÇÅ ‚äó a‚ÇÇ) = shuffle > (((T‚ÇÇ a‚ÇÅ) √ó (T‚ÇÇ a‚ÇÇ)) > shuffle)
\end{code}
%</t2-pair>
\begin{code}

\end{code}
%<*t2-examples>
\begin{code}
T‚ÇÇ (arr c) = id √ó c
T‚ÇÇ (first a) = assoclÀ£ > (((T‚ÇÇ a) √ó id) > assocrÀ£)
T‚ÇÇ (create _) = swapÀ£
T‚ÇÇ (erase) = swapÀ£
\end{code}
%</t2-examples>
\begin{code}

T‚ÇÇ (a‚ÇÅ ‚ãô a‚ÇÇ) = assocrÀ£ > (((id √ó (T‚ÇÇ a‚ÇÅ)) > ((assoclÀ£ > ((swapÀ£ √ó id) > assocrÀ£)) > (id √ó (T‚ÇÇ a‚ÇÇ)))) > assoclÀ£)
T‚ÇÇ (left a) = ((swapÀ£ > distrib) > (((assoclÀ£ > (((swapÀ£ > (T‚ÇÇ a)) √ó id) > assocrÀ£)) > ((id √ó (assoclÀ£ > (((swapÀ£ > leftSwap) √ó id) > (assocrÀ£ > swapÀ£)))) > assoclÀ£)) + ((assoclÀ£ > ((swapÀ£ √ó id) > assocrÀ£)) > ((id √ó ((assoclÀ£ > ((swapÀ£ √ó id) > assocrÀ£)) > (id √ó (swapÀ£ > (leftSwap > (swap‚Å∫ √ó id)))))) > (assoclÀ£ > ((id √ó swapÀ£) > assoclÀ£)))))) > factor
T‚ÇÇ (a‚ÇÅ ‚äï a‚ÇÇ) = ((swapÀ£ > distrib) > (((((assoclÀ£ > ((assoclÀ£ > ((swapÀ£ > (T‚ÇÇ a‚ÇÅ)) √ó id)) √ó id)) > ((assocrÀ£ > assocrÀ£) > (id √ó (assoclÀ£ > ((swapÀ£ √ó id) > assocrÀ£))))) > (id √ó (id √ó ((assoclÀ£ > ((swapÀ£ > leftSwap) √ó id)) > (assocrÀ£ > swapÀ£))))) > (assoclÀ£ > assoclÀ£)) + (((assoclÀ£ > ((((id √ó swapÀ£) > assoclÀ£) > ((swapÀ£ > (T‚ÇÇ a‚ÇÇ)) √ó id)) √ó id)) > (assocrÀ£ > assocrÀ£)) > ((id √ó ((assoclÀ£ > ((id √ó swapÀ£) > shuffle)) > ((((swapÀ£ > leftSwap) > (swap‚Å∫ √ó id)) √ó id) > (swapÀ£ > (id √ó swapÀ£))))) > (assoclÀ£ > assoclÀ£))))) > factor

-- Lemma 9.1 - T‚ÇÇ preserves semantics
\end{code}

%<*T2-proof>
\begin{code}

T‚ÇÇ-proof : ‚àÄ{b‚ÇÅ b‚ÇÇ}(c : comb (b‚ÇÅ ‚Üù b‚ÇÇ))(v : val b‚ÇÅ) ‚Üí
           Œ£ (val (garbage(c))) (Œª g' ‚Üí
           ((T‚ÇÇ c) [ ([ œÜ(heap(c)) , v ]) ]·∂†) ‚â° ([ g' , (c [ v ]·µÉ) ]))

\end{code}
%</T2-proof>

\begin{code}
T‚ÇÇ-proof (arr c) v = [] , refl
T‚ÇÇ-proof (create _) [] = [] , refl
T‚ÇÇ-proof (erase) v = v , refl
T‚ÇÇ-proof (a‚ÇÅ ‚äó a‚ÇÇ) ([ v‚ÇÅ , v‚ÇÇ ]) with (T‚ÇÇ-proof a‚ÇÅ v‚ÇÅ) | (T‚ÇÇ-proof a‚ÇÇ v‚ÇÇ)
...                                 | (g‚ÇÅ , pf‚ÇÅ) | (g‚ÇÇ , pf‚ÇÇ) rewrite pf‚ÇÅ | pf‚ÇÇ = ([ g‚ÇÅ , g‚ÇÇ ]) , refl
T‚ÇÇ-proof (first a) ([ v ,  v' ]) with (T‚ÇÇ-proof a v)
...                                 | (g , pf) rewrite pf = g , refl
T‚ÇÇ-proof (a‚ÇÅ ‚ãô a‚ÇÇ) v with (T‚ÇÇ-proof a‚ÇÅ v) | (T‚ÇÇ-proof a‚ÇÇ (a‚ÇÅ [ v ]·µÉ))
...                     | (g‚ÇÅ , pf‚ÇÅ) | (g‚ÇÇ , pf‚ÇÇ) rewrite pf‚ÇÅ | pf‚ÇÇ = ([ g‚ÇÅ , g‚ÇÇ ]) , refl
T‚ÇÇ-proof {b‚ÇÇ = b' + b''} (left a) (left v) with (T‚ÇÇ-proof a v)
...                             | (g , pf) rewrite pf = (left ([ g , ([ œÜ(b') , (left(œÜ(b'')))]) ])) , refl
T‚ÇÇ-proof {b‚ÇÇ = b' + b''} (left a) (right v) = (right ([ ([ œÜ(heap(a)) , left(œÜ(b')) ]) , œÜ(b'') ])) , refl
T‚ÇÇ-proof {b‚ÇÇ = b' + b''} (a‚ÇÅ ‚äï a‚ÇÇ) (left v‚ÇÅ) with (T‚ÇÇ-proof a‚ÇÅ v‚ÇÅ)
...                                             | (g‚ÇÅ , pf‚ÇÅ) rewrite pf‚ÇÅ = (left ([ ([ g‚ÇÅ , œÜ(heap(a‚ÇÇ)) ]) , ([ œÜ(b') , (left (œÜ(b''))) ]) ])) , refl
T‚ÇÇ-proof {b‚ÇÇ = b' + b''} (a‚ÇÅ ‚äï a‚ÇÇ) (right v‚ÇÇ) with (T‚ÇÇ-proof a‚ÇÇ v‚ÇÇ)
...                                             | (g‚ÇÇ , pf‚ÇÇ) rewrite pf‚ÇÇ = (right ([ ([ g‚ÇÇ , ([ œÜ(heap(a‚ÇÅ)) , (left (œÜ(b'))) ]) ]) , œÜ(b'') ])) , refl
\end{code}
